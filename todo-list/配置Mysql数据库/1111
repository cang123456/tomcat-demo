mysql8用什么连接java

获取驱动
    Maven 项目：在 pom.xml 中添加依赖
    <dependency>
        <groupId>com.mysql</groupId>
        <artifactId>mysql-connector-j</artifactId>
        <version>8.0.33</version> <!-- 最新版本可到 Maven 仓库查询 -->
    </dependency>
    非 Maven 项目：从 MySQL 官网 下载 mysql-connector-j-8.0.x.jar，并添加到项目的类路径中


创建mysql测试表：
      use test;

      create table emp(
          emp_name varchar(10) comment '姓名',
          emp_sex varchar(10) comment '性别',
          emp_age int(2) comment '年龄'
      );

      use test;
      作用：切换到名为 test 的数据库，后续的表操作将在该数据库中进行。
      说明：test 是 MySQL 中默认存在的测试数据库，也可以替换为你自己创建的数据库名称（需先确保该数据库已存在）。
      create table emp(...);
      作用：在当前数据库（此处为 test）中创建名为 emp 的表，表结构包含 3 个字段，用于存储员工的基本信息。
      表中字段说明：
      emp_name varchar(10) comment '姓名'
      emp_name：字段名（员工姓名）。
      varchar(10)：字段类型为可变长度字符串，最大长度为 10 个字符（可存储中文姓名，一个中文占 1 个字符位置）。
      comment '姓名'：字段的注释，用于说明该字段的含义。
      emp_sex varchar(10) comment '性别'
      存储员工性别，类型为 varchar(10)，可存储 “男”“女” 等字符串。
      emp_age int(2) comment '年龄'
      emp_age：字段名（员工年龄）。
      int(2)：字段类型为整数，(2) 表示显示宽度（不影响实际存储范围，整数类型默认可存储 -2147483648 到 2147483647 之间的值）。

    插入测试数据：
    INSERT INTO emp VALUES("王明","女","39"),("郑宇","男","35"),("何晓晓","女","32"),("刘一鸣","男","41");

    查询数据：
    select * from emp
连接代码示例:
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Test {
    public static void main(String[] args) {
        // 数据库连接相关信息（请替换为你的实际配置）
        String url = "jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai";
        String username = "root";
        String password = "你的数据库密码";

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // 获取数据库连接
            connection = DriverManager.getConnection(url, username, password);
            statement = connection.createStatement();

            // 查询 emp 表（使用小写表名，与创建时保持一致）
            String sql = "select * from emp";
            resultSet = statement.executeQuery(sql);

            // 遍历结果集（使用实际的字段名 emp_name、emp_sex、emp_age）
            while (resultSet.next()) {
                String name = resultSet.getString("emp_name");  // 修正字段名
                String sex = resultSet.getString("emp_sex");    // 修正字段名
                int age = resultSet.getInt("emp_age");          // 修正字段名，使用int类型

                System.out.print("姓名: " + name);
                System.out.print("  性别: " + sex);
                System.out.print("  年龄: " + age);
                System.out.println();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("数据库操作异常");
        } finally {
            // 关闭资源
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

    项目开始：
    -- 1. 创建数据库
    CREATE DATABASE IF NOT EXISTS test_db CHARACTER SET utf8mb4;
    USE test_db;

    -- 2. 创建用户表（密码建议加密存储，此处为演示用明文）
    CREATE TABLE IF NOT EXISTS `user` (
      `id` INT PRIMARY KEY AUTO_INCREMENT,
      `username` VARCHAR(50) NOT NULL UNIQUE, -- 用户名（唯一）
      `password` VARCHAR(50) NOT NULL         -- 密码（实际项目需MD5/SHA加密）
    );

    -- 3. 插入测试数据（用户名：admin，密码：123456）
    INSERT INTO `user` (`username`, `password`) VALUES ('admin', '123456');


    html代码：
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <title>用户登录</title>
        <style>
            .login-box { width: 300px; margin: 100px auto; text-align: center; }
            input { margin: 10px 0; padding: 8px; width: 200px; }
            button { padding: 8px 20px; background: #4285F4; color: white; border: none; cursor: pointer; }
            #msg { color: red; margin-top: 10px; }
        </style>
    </head>
    <body>
        <div class="login-box">
            <h2>登录</h2>
            用户名：<input type="text" id="username" placeholder="请输入用户名"><br>
            密码：<input type="password" id="password" placeholder="请输入密码"><br>
            <button onclick="login()">登录</button>
            <div id="msg"></div> <!-- 用于显示登录结果（成功/失败） -->
        </div>

        <script>
            // 登录核心逻辑：通过AJAX发送请求到Tomcat的Servlet
            function login() {
                // 1. 获取用户输入
                const username = document.getElementById("username").value;
                const password = document.getElementById("password").value;

                // 2. 验证输入不为空
                if (!username || !password) {
                    document.getElementById("msg").innerText = "用户名或密码不能为空！";
                    return;
                }

                // 3. 创建AJAX对象（兼容浏览器）
                const xhr = new XMLHttpRequest() || new ActiveXObject("Microsoft.XMLHTTP");

                // 4. 配置请求（POST方式，请求路径为Servlet的URL）
                // 注意：路径格式为 "http://localhost:8080/项目名/Servlet映射名"
                xhr.open("POST", "http://localhost:8080/WebLoginDemo/com.example.tomcatdemo.LoginServlet", true);

                // 5. 设置请求头（POST请求需指定表单数据格式）
                xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

                // 6. 发送请求（携带用户名和密码参数）
                xhr.send(`username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`);

                // 7. 监听后端响应
                xhr.onreadystatechange = function() {
                    // 当请求完成且响应成功（readyState=4，status=200）
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        // 后端返回JSON字符串，解析为JS对象
                        const result = JSON.parse(xhr.responseText);

                        // 根据后端返回的success字段处理结果
                        if (result.success) {
                            document.getElementById("msg").style.color = "green";
                            document.getElementById("msg").innerText = "登录成功！即将跳转...";
                            // 登录成功后跳转首页（如index.html）
                            setTimeout(() => window.location.href = "index.html", 1500);
                        } else {
                            document.getElementById("msg").innerText = result.msg; // 显示失败原因（如“用户名或密码错误”）
                        }
                    }
                };
            }
        </script>
    </body>
    </html>

    servlet代码：
    package com.example.servlet;

    import javax.servlet.ServletException;
    import javax.servlet.annotation.WebServlet;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.sql.*;

    // 1. 配置Servlet映射：前端请求路径为 "/com.example.tomcatdemo.LoginServlet"（需与前端AJAX的URL一致）
    @WebServlet("/com.example.tomcatdemo.LoginServlet")
    public class com.example.tomcatdemo.LoginServlet extends HttpServlet {
        // 2. 重写doPost方法（处理前端POST请求）
        @Override
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            // 3. 解决中文乱码问题（请求和响应都需设置）
            request.setCharacterEncoding("UTF-8");
            response.setCharacterEncoding("UTF-8");
            response.setContentType("application/json; charset=UTF-8"); // 响应格式为JSON

            // 4. 获取前端传递的参数（username和password）
            String username = request.getParameter("username");
            String password = request.getParameter("password");

            // 5. 初始化数据库连接参数（替换为你的MySQL配置）
            String url = "jdbc:mysql://localhost:3306/test_db?useSSL=false&serverTimezone=UTC";
            String dbUsername = "root"; // 你的MySQL用户名（如root）
            String dbPassword = "123456"; // 你的MySQL密码

            // 6. 声明数据库相关对象
            Connection conn = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;
            PrintWriter out = response.getWriter(); // 用于输出JSON响应

            try {
                // 7. 加载MySQL JDBC驱动（MySQL 8.0+无需显式加载，可省略）
                Class.forName("com.mysql.cj.jdbc.Driver");

                // 8. 建立数据库连接
                conn = DriverManager.getConnection(url, dbUsername, dbPassword);

                // 9. 编写SQL（查询用户名对应的密码，使用PreparedStatement防止SQL注入）
                String sql = "SELECT password FROM user WHERE username = ?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, username); // 替换SQL中的?为前端传递的username

                // 10. 执行SQL查询，获取结果集
                rs = pstmt.executeQuery();

                // 11. 验证结果：判断是否存在该用户，且密码一致
                if (rs.next()) { // 存在该用户名
                    String dbPwd = rs.getString("password"); // 从数据库获取密码
                    if (dbPwd.equals(password)) { // 密码一致 → 登录成功
                        out.write("{\"success\":true, \"msg\":\"登录成功\"}");
                    } else { // 密码不一致 → 登录失败
                        out.write("{\"success\":false, \"msg\":\"密码错误\"}");
                    }
                } else { // 不存在该用户名 → 登录失败
                    out.write("{\"success\":false, \"msg\":\"用户名不存在\"}");
                }

            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                out.write("{\"success\":false, \"msg\":\"驱动加载失败\"}");
            } catch (SQLException e) {
                e.printStackTrace();
                out.write("{\"success\":false, \"msg\":\"数据库连接失败\"}");
            } finally {
                // 12. 关闭数据库资源（避免内存泄漏，顺序：ResultSet → PreparedStatement → Connection）
                try {
                    if (rs != null) rs.close();
                    if (pstmt != null) pstmt.close();
                    if (conn != null) conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                out.close(); // 关闭输出流
            }
        }

        // 可选：重写doGet方法（若前端用GET请求，逻辑与doPost一致）
        @Override
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            doPost(request, response);
        }
    }